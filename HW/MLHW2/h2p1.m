clear;
load('C:\Users\zhran\Desktop\xka\MLHW2\dataset3.mat', 'data')
% prepare the training data
x = data(:,[1,2]);
b = ones(length(x),1);
x = [b x];
y = data(:,3);

% online perceptron (sgd)
    % initialization
    c = 0;
    epochs = 200000;
    step = 5;
    tolerance = 0.001; 
    weight = rand(size(x,2),1);
    pt = 2 * tolerance + weight;
    
    clas_errors = []; %classification errors
    ptr_errors = []; %perceptron errors
   
    testlength = length(x);
    
    misclassification_point = 0;
    while norm(weight - pt) >= tolerance
        if c > epochs
            break;
        end
        
        i = 1;
        while i <= testlength;
            out = y(i,:)*(x(i,:)*weight);
            
           if out <= 0  % misclassified
                misclassification_point = misclassification_point + 1; 
                pt = weight;
                i = i + 1;
                weight = weight + y(i) * x(i,:)';
                
            end
        end
        c = c + 1;
    end 
        
        
        %print iteration, error and risk in command window
        fprintf('Iteration:%d, Classification Error:%0.4f, Perceptron Error:%0.4f\n', c, clas_errors, ptr_errors);
        risks = cat(1, clas_errors, clas_errors);
        errors = cat(1, ptr_errors, ptr_errors);
  
        
        %c = c + 1;
%%   
% plot linear boundary on 2d x data
    % dataset with y = -1
    y_neg = data(data(:,3) == -1,:);  
    y_neg_x1 = y_neg(:,1);
    y_neg_x2 = y_neg(:,2);
    % dataset with y = 1
    y_pos = data(data(:,3) == 1,:); 
    y_pos_x1 = y_neg(:,1);
    y_pos_x2 = y_neg(:,2);
    
    % calculate the doundary line function
    b = weight(1,:);
    w1 = weight(2,:);
    w2 = weight(3,:);
    x11 = data(:,1);
    x22 =(-(b / w2)/(b / w1)) * x11 + (-b / w2);
        
    figure
    plot(y_neg_x1,y_neg_x2,'x'); 
    hold on;
    plot(y_pos_x1,y_pos_x2,'o');
    hold on;
    plot(x11, x22,'r')
    xlabel('x1');
    ylabel('x2');
    title('Resulted Linear Decision Boundary for 2D X data');
    
    %%
% plot binary classification error and perceptron error with iteration
% number

%discuss gd convergence behavior with different eta

% perceptron error
function R = risk(x, y, theta)
    f = 1./(1 + exp(-x * theta));
    r = (y - 1).*log(1 - f) - y.*log(f); 
    r(isnan(r)) = 0;
    R = mean(r);
end

% perceptron boundary
function y = y_per_bondary(x,weight)
    b = weight(1,:);
    w1 = weight(2,:);
    w2 = weight(3,:);  
    y = (-(b / w2)/(b / w1)) * x + (-b / w2);
end

function importfile(fileToRead1)
    %IMPORTFILE(FILETOREAD1)
    %  Imports data from the specified file
    %  FILETOREAD1:  file to read

    %  Auto-generated by MATLAB on 06-Oct-2021 20:20:29

    % Import the file
    newData1 = load('-mat', fileToRead1);

    % Create new variables in the base workspace from those fields.
    vars = fieldnames(newData1);
    for i = 1:length(vars)
        assignin('base', vars{i}, newData1.(vars{i}));
    end
end